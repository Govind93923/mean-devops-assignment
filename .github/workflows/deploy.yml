# .github/workflows/deploy.yml
name: CI/CD Pipeline for MEAN App

# This workflow runs on any push to the 'main' branch
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    # 1. Get the code from the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Login to Docker Hub using secrets
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # 3. Build and push the backend image to Docker Hub
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/mean-backend:latest

    # 4. Build and push the frontend image to Docker Hub
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/mean-frontend:latest

    # 5. Deploy the new images to the server via SSH
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Navigate to the project directory on the server
          # This command creates the directory and clones the repo only on the very first run
          if [ ! -d "mean-devops-assignment" ]; then
            git clone https://github.com/Govind93923/mean-devops-assignment.git
          fi

          cd mean-devops-assignment

          # Pull the latest changes (like an updated docker-compose.yml)
          git pull

          # Login to Docker Hub on the server to pull private images if needed
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

          # Pull the newest images from Docker Hub
          docker-compose pull

          # Stop the current containers and start new ones with the updated images
          docker-compose up -d --remove-orphans

          # Clean up any old, unused Docker images
          docker image prune -f